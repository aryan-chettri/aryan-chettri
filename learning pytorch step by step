{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNwgYUNTp3prEB8VqJHZ3uB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aryan-chettri/aryan-chettri/blob/main/learning%20pytorch%20step%20by%20step\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is a pytorch code\n"
      ],
      "metadata": {
        "id": "3BqpsbPk-wcP"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jUGWsNMc_J-N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6D8iYJwn1rXd",
        "outputId": "55ec534f-a3ea-41c7-b518-01627a16e3af"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/bin/bash: line 1: nvidia-smi: command not found\n"
          ]
        }
      ],
      "source": [
        "!nvidia-smi\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "t15yWzAG_Lyq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "jOnWIe2O6Tim"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Tensor = torch.tensor([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]],[[13,14,15],[16,17,18]]])"
      ],
      "metadata": {
        "id": "nZIphfz26T6c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Tensor.ndim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OZCru46O7Jdd",
        "outputId": "dbaa4624-d1d3-4638-caff-1fa4bf447646"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Tensor.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N9yWKT-y7aIf",
        "outputId": "fa585620-4849-48fd-ec2b-1d6963d2f280"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([3, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Tensor[2\n",
        "       ]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wGdSL7ei7g4R",
        "outputId": "921e0e7e-1bf1-4875-9d69-82e37e7bc912"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[13, 14, 15],\n",
              "        [16, 17, 18]])"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_tensors = torch.rand(3,4)\n",
        "random_tensors"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-_o_MiH97w-B",
        "outputId": "2b166119-fa4a-429d-bfb1-98743c7d4a46"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[0.1564, 0.6157, 0.5604, 0.3428],\n",
              "        [0.9167, 0.6692, 0.0035, 0.6095],\n",
              "        [0.5776, 0.1707, 0.5333, 0.5677]])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_tensors.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xBC1w9uJ9XQu",
        "outputId": "979afceb-e628-4914-a7ae-5156d7269a0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "zeros = torch.zeros(size=(3,4))\n",
        "zeros"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D1s2ezxE-Y7T",
        "outputId": "49f40f5a-79b5-42dc-88c6-a759f9704e5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[0., 0., 0., 0.],\n",
              "        [0., 0., 0., 0.],\n",
              "        [0., 0., 0., 0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ones = torch.ones(size=(3,4))\n",
        "ones\n",
        "ones.dtype\n",
        "print(ones)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aeBLzcbJ-nY6",
        "outputId": "05dc52c9-bfb5-4be4-d8d6-ad3ba2f4903d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1., 1., 1., 1.],\n",
            "        [1., 1., 1., 1.],\n",
            "        [1., 1., 1., 1.]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Creating a range of tensors"
      ],
      "metadata": {
        "id": "Atl7j7wl-nVY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "torch.arange(0, 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FJFjBnHV-nS7",
        "outputId": "f810e866-0423-4bee-f74c-5ae1d949012f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.arange(start = 1, end = 100 , step = 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZMD3qqD-nQQ",
        "outputId": "437c65cf-0b72-469f-8813-4a563a752ab4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([ 1, 11, 21, 31, 41, 51, 61, 71, 81, 91])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ten_zeroes = torch.zeros_like(torch.arange(start = 1 , end = 10))\n",
        "ten_zeroes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u-MATqdO-nNd",
        "outputId": "1055d606-5801-4056-8877-1056a14f160a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "float_32_tensor = torch.tensor([3., 6., 9.], dtype = None, device = \"cpu\")\n"
      ],
      "metadata": {
        "id": "Xzhxgt4N-nKq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "float_16 = float_32_tensor.type(torch.float16)\n",
        "float_16\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OJKVwfDO0Sg4",
        "outputId": "27013e96-22b8-49a9-bab1-d095f5db01b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([3., 6., 9.], dtype=torch.float16)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "float_16 * float_32_tensor"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rJ6nXKo20Sdi",
        "outputId": "cbf9e947-92f3-4f82-99e7-7d9d98d730bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([ 9., 36., 81.])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int_32_tensor = torch.tensor([3,6,9], dtype = torch.int32)\n",
        "int_32_tensor"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BXU6z5y90Saz",
        "outputId": "14f05311-2a24-4071-d9e7-bbf5d3f04dd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([3, 6, 9], dtype=torch.int32)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a tensor\n",
        "\n",
        "some_tensor = torch.rand(3,4)\n",
        "\n",
        "rand_tensor = some_tensor*100"
      ],
      "metadata": {
        "id": "vfZ-TE0t0SYO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(some_tensor)\n",
        "print(f\"Datatype of tensor :{some_tensor.dtype}\")\n",
        "print(f\"Shape of tensor: {some_tensor.size}\")\n",
        "\n",
        "print(f\"Device tensor is on :{some_tensor.device}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3bG099ym0SVg",
        "outputId": "0bdaee48-25e1-400b-9ecd-12e3e3445880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0.2639, 0.2474, 0.6285, 0.2727],\n",
            "        [0.3908, 0.2148, 0.5944, 0.1899],\n",
            "        [0.3561, 0.4287, 0.2963, 0.7387]])\n",
            "Datatype of tensor :torch.float32\n",
            "Shape of tensor: <built-in method size of Tensor object at 0x79f05c00e930>\n",
            "Device tensor is on :cpu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Manipulating tensors\n",
        "\n",
        "Tensor operations include\n",
        "\n",
        "Addition\n",
        "\n",
        "substaction\n",
        "\n",
        "multiplication\n",
        "\n",
        "division\n",
        "\n",
        "matrix multiplication"
      ],
      "metadata": {
        "id": "HVyVyrog0SS4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tensor = torch.tensor([1,2,3])\n",
        "\n",
        "tensor + 10\n",
        "\n",
        "tensor * 10\n",
        "\n",
        "tensor / 10\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sJiKJDOV0SQM",
        "outputId": "5f4a5234-cf0d-469f-aca3-cb431b801f2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0.1000, 0.2000, 0.3000])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "tensor = torch.tensor([1,2,3])\n",
        "\n",
        "tensor * tensor"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3GlMji999b_W",
        "outputId": "1495996a-fde8-449b-b936-2bedf1150b43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([1, 4, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.matmul(tensor, tensor)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9o4onQ9I9b71",
        "outputId": "8bd3ab75-17f4-4b80-e72c-e54264ecacb1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor(14)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "\n",
        "value = 0 ;\n",
        "\n",
        "for i in range (len(tensor)):\n",
        "\n",
        "  value = value + tensor[i] * tensor[i]\n",
        "\n",
        "print(value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2-fFAJF9b5m",
        "outputId": "50615a1a-4c6d-4a5d-b4ef-8a94b51e5e0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(14)\n",
            "CPU times: user 1.01 ms, sys: 1 µs, total: 1.01 ms\n",
            "Wall time: 1.02 ms\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "\n",
        "torch.matmul(tensor, tensor)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "akZixaIm9b21",
        "outputId": "cc9db92a-9c5a-49a9-8421-b7aef47fb534"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 0 ns, sys: 80 µs, total: 80 µs\n",
            "Wall time: 83.9 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor(14)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(torch.matmul(torch.rand(3,100), torch.rand(100,3))*100).shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p8tdpKL89b0I",
        "outputId": "f6b7e848-66ac-4e6e-a1a2-6971faef5b9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([3, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Shapes for matrix multiplication\n",
        "\n",
        "import torch\n",
        "\n",
        "tensor_A = torch.rand(3,2)\n",
        "\n",
        "tensor_B = torch.rand(3,2)\n",
        "\n",
        "torch.matmul(tensor_A, tensor_B.T).shape\n",
        "\n",
        "tensor_B.T"
      ],
      "metadata": {
        "id": "Q4Ejb9jU9bxk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84f8945f-b590-4aea-dca9-f8a24e3dde25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[0.6332, 0.1598, 0.4858],\n",
              "        [0.4776, 0.5637, 0.5057]])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Finding the min, max, mean, sum, etc (tensor aggregation)\n",
        "\n",
        "x = torch.arange(0,100,10)\n",
        "\n",
        "x\n",
        "\n",
        "x.dtype"
      ],
      "metadata": {
        "id": "B1BqJeaj9bu_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a8560809-26e2-4545-ed9b-ba497070b075"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.min(x), x.min()"
      ],
      "metadata": {
        "id": "MFjlks999bsO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5fcce427-3999-4f0a-86cf-8ffe84a33e14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor(0), tensor(0))"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.max(x), x.max()"
      ],
      "metadata": {
        "id": "SENHEjcp9bpg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34de68d2-8ee4-45cf-8480-713c7a87e137"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor(90), tensor(90))"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.mean(x.type(torch.float32))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qfGvmTqoKels",
        "outputId": "f77deccf-9a9c-4ef2-aef9-a5218fcf1c03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor(45.)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# finding the sum\n",
        "\n",
        "torch.sum(x)\n",
        "\n",
        "#finding the positional min and max\n",
        "\n",
        "x.argmin(), x.argmax()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MAAL8OmtKeia",
        "outputId": "b233259a-7108-4161-8b4f-3c6a99db1163"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor(0), tensor(9))"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## reshaping , stacking, squeezing and unsqueezing tensors\n",
        "\n",
        "reshaping = reshapes an input tensor to a defined shape\n",
        "\n",
        "view teturn a view of an input tensor of certain shape but keeps the same as the orginal one"
      ],
      "metadata": {
        "id": "wZbPSnfyKefk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x= torch.arange(1. , 10.)\n",
        "\n",
        "x, x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NbpMwX15KedA",
        "outputId": "6d109b3e-d53b-43f9-cc95-72e3a8dad8f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.]), torch.Size([9]))"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_reshaped = x.reshape(1, 9)\n",
        "\n",
        "x_reshaped , x_reshaped.shape"
      ],
      "metadata": {
        "id": "r_n98nWXKeaL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b02edace-4b05-469e-e214-e41ae15d637d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]]), torch.Size([1, 9]))"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "z = x.view(1, 9)\n",
        "\n",
        "z, z.shape"
      ],
      "metadata": {
        "id": "OgpTiEyJKeXg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "62cdb54b-f003-4f5b-fb99-e17257a9c3d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]]), torch.Size([1, 9]))"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "z[:, 0] = 5\n",
        "\n",
        "z , x"
      ],
      "metadata": {
        "id": "dwUfTI2gKeU7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47fb474a-3888-47ea-9c19-bd4f1264c549"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[5., 2., 3., 4., 5., 6., 7., 8., 9.]]),\n",
              " tensor([5., 2., 3., 4., 5., 6., 7., 8., 9.]))"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Stacking tensors on top of each other\n",
        "\n",
        "x_stacked = torch.stack([x, x, x, x], dim = 1)\n",
        "\n",
        "x_stacked"
      ],
      "metadata": {
        "id": "23Z2HPEfKeSL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba54190b-aeb5-4bb4-be2e-8123770c5fb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[5., 5., 5., 5.],\n",
              "        [2., 2., 2., 2.],\n",
              "        [3., 3., 3., 3.],\n",
              "        [4., 4., 4., 4.],\n",
              "        [5., 5., 5., 5.],\n",
              "        [6., 6., 6., 6.],\n",
              "        [7., 7., 7., 7.],\n",
              "        [8., 8., 8., 8.],\n",
              "        [9., 9., 9., 9.]])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#torch. squeez\n",
        "\n",
        "x_reshaped, x_reshaped.shape"
      ],
      "metadata": {
        "id": "2V4nIn-WKePc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c12a50a2-af20-4e4e-8de5-19f421ec086c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[5., 2., 3., 4., 5., 6., 7., 8., 9.]]), torch.Size([1, 9]))"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = x_reshaped.squeeze()\n",
        "\n",
        "y.shape, x_reshaped.shape"
      ],
      "metadata": {
        "id": "tTR7dyACKeM1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e17b008e-c39f-40ee-9aa8-fc823a98d291"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(torch.Size([9]), torch.Size([1, 9]))"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = y.unsqueeze(dim =1)\n",
        "\n",
        "y"
      ],
      "metadata": {
        "id": "Io62hOMVKeKT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "304eabac-e3fa-4ef3-82b6-341641136fe0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[5.],\n",
              "        [2.],\n",
              "        [3.],\n",
              "        [4.],\n",
              "        [5.],\n",
              "        [6.],\n",
              "        [7.],\n",
              "        [8.],\n",
              "        [9.]])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# torch.unsqueeze"
      ],
      "metadata": {
        "id": "pfBIJ0C9KeHo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#torch. permute changes the size of the size of the tensor in a specified order\n",
        "\n",
        "x=torch.rand(2,3,5)\n",
        "\n",
        "torch.permute(x, (2, 0, 1)).size()\n",
        "\n",
        "x_original = torch.rand(size=(224, 224, 3))\n",
        "\n",
        "x_permuted = torch.permute(x_original , (2, 0, 1))\n",
        "\n",
        "print(f\"The orginal tensor is {x_original.shape}\")\n",
        "\n",
        "print(f\"The permuted tensor is {x_permuted.shape}\")\n"
      ],
      "metadata": {
        "id": "0n0_vli0KeE1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a63465f-8c22-4fec-cfdc-a1cebda6e19f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The orginal tensor is torch.Size([224, 224, 3])\n",
            "The permuted tensor is torch.Size([3, 224, 224])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_original[0, 0, 0] = 2345\n",
        "\n",
        "x_original[0, 0, 0] , x_permuted[0, 0, 0]"
      ],
      "metadata": {
        "id": "fezHaY4L9bm8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20c47911-f55a-4f8d-ecb7-ee4e298134cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor(2345.), tensor(2345.))"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "from torch.return_types import nanmedian\n",
        "## indexing selectiondata from tensors\n",
        "\n",
        "\n",
        "indesing with pytorch is similar dto indexing with numpy"
      ],
      "metadata": {
        "id": "Opp7y_Jl9bkW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "x = torch.arange(1, 10).reshape(1, 3, 3)\n",
        "\n",
        "x, x.shape\n",
        "\n"
      ],
      "metadata": {
        "id": "--Ce81iM9biH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39e13201-8fbd-4e45-81f4-470014aec4c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[[1, 2, 3],\n",
              "          [4, 5, 6],\n",
              "          [7, 8, 9]]]),\n",
              " torch.Size([1, 3, 3]))"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x[:, :, 1]"
      ],
      "metadata": {
        "id": "8Gyk96ZA9be4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "745a9ff5-5b95-4bcc-9359-889f15e82c36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[2, 5, 8]])"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Pytorch tensors and numpy\n",
        "\n",
        "import torch\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "array = np.arange(1.0, 8.0)\n",
        "\n",
        "tensor = torch.from_numpy(array)\n",
        "\n",
        "array , tensor\n"
      ],
      "metadata": {
        "id": "UJvQrccs9bcb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4291408e-4277-45d0-c1b2-e7b37f70b125"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([1., 2., 3., 4., 5., 6., 7.]),\n",
              " tensor([1., 2., 3., 4., 5., 6., 7.], dtype=torch.float64))"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "random_tensor_A = torch.rand(3, 4)\n",
        "\n",
        "random_tensor_B = torch.rand(3, 4)\n",
        "\n",
        "print(random_tensor_A)\n",
        "\n",
        "print(random_tensor_B)\n",
        "\n",
        "print(random_tensor_A == random_tensor_B)"
      ],
      "metadata": {
        "id": "9naaBuu19bZw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8cd9f7d8-59b3-4f03-de9e-e7d8d329a310"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0.2269, 0.7889, 0.2607, 0.8330],\n",
            "        [0.4195, 0.8809, 0.3103, 0.4928],\n",
            "        [0.1581, 0.7488, 0.7703, 0.9042]])\n",
            "tensor([[0.7079, 0.4386, 0.7487, 0.1357],\n",
            "        [0.8609, 0.5616, 0.9219, 0.4684],\n",
            "        [0.7728, 0.2664, 0.4686, 0.1793]])\n",
            "tensor([[False, False, False, False],\n",
            "        [False, False, False, False],\n",
            "        [False, False, False, False]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "#set the random seed\n",
        "\n",
        "random_seed = 42\n",
        "\n",
        "torch.manual_seed(random_seed)\n",
        "\n",
        "random_tensor_c = torch.rand(3, 4)\n",
        "\n",
        "torch.manual_seed(random_seed)\n",
        "\n",
        "random_tensor_d = torch.rand(3, 4)\n",
        "\n",
        "print(random_tensor_c)\n",
        "\n",
        "print(random_tensor_d)\n",
        "\n",
        "print(random_tensor_c == random_tensor_d)"
      ],
      "metadata": {
        "id": "k9HSw2jb9bXS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c72dbed9-4fae-4cb3-8a0a-12dd97f8d274"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n",
            "        [0.3904, 0.6009, 0.2566, 0.7936],\n",
            "        [0.9408, 0.1332, 0.9346, 0.5936]])\n",
            "tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n",
            "        [0.3904, 0.6009, 0.2566, 0.7936],\n",
            "        [0.9408, 0.1332, 0.9346, 0.5936]])\n",
            "tensor([[True, True, True, True],\n",
            "        [True, True, True, True],\n",
            "        [True, True, True, True]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "tensor = torch.tensor([1,2,3] , device = \"cpu\")\n",
        "\n",
        "\n",
        "print(tensor, tensor.device)"
      ],
      "metadata": {
        "id": "S9z7qwig9bU2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "11ba7a7b-ec4b-413d-fb82-8dbcd6b86821"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([1, 2, 3]) cpu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "go2-zmES9bPh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-HRi8dNZ0SNe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AfdJf4X60SKu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5qLiAe2u-nH1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QB6yGCWx-nE4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hbIqyXHgNQsQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EYZb7U4QNQos"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MNhuAy5TNQl2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "guJYzsWNNQi8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hv0EGmS_NQf1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GoYwJ7MpNQc4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XDpcHLxNNQZ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YrS6RhU9NQXD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "68CIbpTeNQUE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8u8qoofWNQQ5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RsSAHQgjNQNt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "yTruyW1jNQLN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xyUgrStPNQIo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nzhP40SZNQF2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g0BSbotvNQDk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "R9Ulg3vCNQA8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "y0-dD3l8NP-L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IC2QvEp0NP7i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iEJILzI1NP4v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PEjYctC5-nBp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}